service: pi-speedtest-sls

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage}
  region: us-east-1
  memorySize: 768
  timeout: 15
  deploymentBucket: sls-depl-${self:provider.region}-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:Query
      Resource:
        - { "Fn::Join" : [ ":", [ "arn:aws:dynamodb:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "table/${self:custom.sampleTable}" ] ] }
        - { "Fn::Join" : [ ":", [ "arn:aws:dynamodb:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "table/${self:custom.userTable}" ] ] }
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - { "Fn::Join" : [ ":", [ "arn:aws:dynamodb:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "table/${self:custom.accessTokenTable}" ] ] }
        - { "Fn::Join" : [ ":", [ "arn:aws:dynamodb:${self:provider.region}", { "Ref" : "AWS::AccountId" }, "table/${self:custom.sampleTokenTable}" ] ] }
  environment:
    ACCESS_TOKEN_TABLE: ${self:custom.accessTokenTable}
    AT_SECRET: ${self:custom.config.AT_SECRET}
    CLIENT_ID: ${self:custom.config.CLIENT_ID}
    CLIENT_SECRET: ${self:custom.config.CLIENT_SECRET}
    GQL_SECRET: ${self:custom.config.GQL_SECRET}
    JWT_SECRET: ${self:custom.config.JWT_SECRET}
    SAMPLE_TABLE: ${self:custom.sampleTable}
    SAMPLE_TOKEN_TABLE: ${self:custom.sampleTokenTable}
    USER_TABLE: ${self:custom.userTable}

functions:
  #
  # Authenticate user by requesting an access token from GitHub
  #
  authenticate:
    handler: index.authGitHub
    events:
      - http:
          path: auth/github
          cors: true
          method: get

  #
  # Logout by removing the current access token
  #
  logout:
    handler: index.logout
    events:
      - http:
          path: auth/logout
          cors: true
          method: get
          authorizer: authorizer

  #
  # Single endpoint for all GraphQL related queries/mutations
  #
  graphql:
    handler: index.graphql
    events:
      - http:
          path: graphql
          method: post
          cors: true
          authorizer: authorizer

  #
  # Authoriser function for user authorisation
  #
  authorizer:
    handler: index.authorizer

  ###################################################################
  # The functions below are for posting samples only
  ###################################################################

  #
  # Post measurement sample
  #
  postSample:
    handler: samples.postSample
    events:
      - http:
          path: sample
          cors: true
          method: post
          authorizer: sampleAuthorizer

  sampleAuthorizer:
    handler: samples.authorizer

#
# Resources (e.g., database tables)
#
resources:
  Resources:
    #
    # Access token table contains the access tokens for GitHub
    #
    AccessTokenTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.accessTokenTable}
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"

    #
    # Samples table contains the samples uploaded by the client
    #
    SamplesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.sampleTable}
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "created"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
          - AttributeName: "created"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true

    #
    # Sample token table contains the tokens needed for posting samples
    #
    sampleTokenTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.sampleTokenTable}
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"

    #
    # User table contains the user objects
    #
    UserTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.userTable}
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "1"
          WriteCapacityUnits: "1"

#
# Custom section
#
custom:
  defaultStage: dev
  profiles:
    dev: development
    prod: production
  common: ${file(./common.json)}
  config: ${file(./config.json)}
  accessTokenTable: ${self:custom.common.accessTokenTable}
  sampleTable: ${self:custom.common.sampleTable}
  sampleTokenTable: ${self:custom.common.sampleTokenTable}
  userTable: ${self:custom.common.userTable}
